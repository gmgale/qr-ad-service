package handlers

import (
	"encoding/json"
	"net/http"

	"github.com/gmgale/qr-ad-service/internal/auth"
	"github.com/gmgale/qr-ad-service/internal/db"
	"github.com/gmgale/qr-ad-service/internal/models"
)

// OwnerAccountSummary contains summary information for an owner's account
type OwnerAccountSummary struct {
	TotalRevenue float64 `json:"total_revenue"`
	TotalClicks  int64   `json:"total_clicks"`
	QRCodesCount int64   `json:"qr_codes_count"`
}

// GetOwnersSummary returns a summary of the owner's account
func (s *Server) GetOwnersSummary(w http.ResponseWriter, r *http.Request) {
	// Extract the user ID from the JWT context
	userID := r.Context().Value(auth.UserIDContextKey).(int64)

	// Calculate the total revenue
	var totalRevenue float64
	err := db.DB.Model(&models.Revenue{}).Where("user_id = ?", userID).Select("SUM(amount)").Scan(&totalRevenue).Error
	if err != nil {
		http.Error(w, "Failed to retrieve total revenue", http.StatusInternalServerError)
		return
	}

	// Count the total number of clicks
	var totalClicks int64
	err = db.DB.Model(&models.AdLog{}).Where("qr_code_id IN (SELECT id FROM qr_codes WHERE user_id = ?)", userID).Count(&totalClicks).Error
	if err != nil {
		http.Error(w, "Failed to retrieve total clicks", http.StatusInternalServerError)
		return
	}

	// Count the number of QR codes generated by the owner
	var qrCodesCount int64
	err = db.DB.Model(&models.QRCode{}).Where("user_id = ?", userID).Count(&qrCodesCount).Error
	if err != nil {
		http.Error(w, "Failed to retrieve QR codes count", http.StatusInternalServerError)
		return
	}

	// Create the summary
	summary := OwnerAccountSummary{
		TotalRevenue: totalRevenue,
		TotalClicks:  totalClicks,
		QRCodesCount: qrCodesCount,
	}

	// Return the summary as JSON
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(summary)
}
